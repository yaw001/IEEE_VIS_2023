plot(coord_32)
coord_32$x = coord_32$x+rnorm(32,0,0.2)
coord_32$y = coord_32$y+rnorm(32,0,0.2)
plot(coord_32)
coord_32$x = coord_32$x+rnorm(32,0,0.2)
coord_32$y = coord_32$y+rnorm(32,0,0.2)
plot(coord_32)
coord_32$x = coord_32$x+rnorm(32,0,0.2)
coord_32$y = coord_32$y+rnorm(32,0,0.2)
plot(coord_32)
coord_32$x = coord_32$x+rnorm(32,0,0.1)
coord_32$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32)
coord_32$x = coord_32$x+rnorm(32,0,0.1)
coord_32$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32)
coord_32$x = coord_32$x+rnorm(32,0,0.1)
coord_32$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32)
coord_32$x = coord_32$x+rnorm(32,0,0.05)
coord_32$y = coord_32$y+rnorm(32,0,0.05)
plot(coord_32)
coord_32 = data.frame(x=c(rep(-b_32,4),rep(-a_32,4),rep(-1,4),rep(-0.5,4),rep(0.5,4),rep(1,4),rep(a_32,4),rep(b_32,4)),
y=c(-b_32,-0.5,0.5,b_32,
-a_32,-1,1,a_32,
-a_32,-1,1,a_32,
-b_32,-0.5,0.5,b_32,
-b_32,-0.5,0.5,b_32,
-a_32,-1,1,a_32,
-a_32,-1,1,a_32,
-b_32,-0.5,0.5,b_32))
var(coord_32)
plot(coord_32)
coord_32$x = coord_32$x+rnorm(32,0,0.05)
coord_32$y = coord_32$y+rnorm(32,0,0.05)
plot(coord_32)
coord_32_noise$x = coord_32$x+rnorm(32,0,0.05)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.05)
plot(coord_32_noise)
coord_32 = data.frame(x=c(rep(-b_32,4),rep(-a_32,4),rep(-1,4),rep(-0.5,4),rep(0.5,4),rep(1,4),rep(a_32,4),rep(b_32,4)),
y=c(-b_32,-0.5,0.5,b_32,
-a_32,-1,1,a_32,
-a_32,-1,1,a_32,
-b_32,-0.5,0.5,b_32,
-b_32,-0.5,0.5,b_32,
-a_32,-1,1,a_32,
-a_32,-1,1,a_32,
-b_32,-0.5,0.5,b_32))
var(coord_32)
plot(coord_32)
coord_32_noise = coord_32
coord_32_noise$x = coord_32$x+rnorm(32,0,0.05)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.05)
plot(coord_32_noise)
coord_32_noise$x = coord_32$x+rnorm(32,0,0.1)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32_noise)
coord_32_noise$x = coord_32$x+rnorm(32,0,0.1)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32_noise)
coord_32_noise$x = coord_32$x+rnorm(32,0,0.15)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.15)
plot(coord_32_noise)
coord_32_noise$x = coord_32$x+rnorm(32,0,0.15)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.15)
plot(coord_32_noise)
coord_32_noise$x = coord_32$x+rnorm(32,0,0.15)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.15)
plot(coord_32_noise)
coord_32_noise$x = coord_32$x+rnorm(32,0,0.1)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32_noise)
coord_32_noise$x = coord_32$x+rnorm(32,0,0.1)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32_noise)
coord_32_noise$x = coord_32$x+rnorm(32,0,0.1)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32_noise)
coord_32_noise$x = coord_32$x+rnorm(32,0,0.1)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32_noise)
coord_16 = data.frame(x=c(rep(-b_16,4),rep(-a_16,4),rep(a_16,4),rep(b_16,4)),
y=c(rep(c(-b_16,-a_16,a_16,b_16),4)))
var(coord_16)
plot(coord_16)
coord_16_noise = coord_16
coord_16_noise$x = coord_16$x+rnorm(16,0,0.1)
coord_16_noise$y = coord_16$y+rnorm(16,0,0.1)
plot(coord_16_noise)
coord_16_noise = coord_16
coord_16_noise$x = coord_16$x+rnorm(16,0,0.1)
coord_16_noise$y = coord_16$y+rnorm(16,0,0.1)
plot(coord_16_noise)
coord_16_noise = coord_16
coord_16_noise$x = coord_16$x+rnorm(16,0,0.1)
coord_16_noise$y = coord_16$y+rnorm(16,0,0.1)
plot(coord_16_noise)
coord_32_noise = coord_32
coord_32_noise$x = coord_32$x+rnorm(32,0,0.1)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32_noise)
coord_32_noise = coord_32
coord_32_noise$x = coord_32$x+rnorm(32,0,0.1)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32_noise)
coord_32_noise = coord_32
coord_32_noise$x = coord_32$x+rnorm(32,0,0.1)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32_noise)
coord_8 = data.frame(x=c(rep(-b_8,2),rep(-a_8,2),rep(a_8,2),rep(b_8,2)),
y=c(b_8,-b_8,-a_8,a_8,-a_8,a_8,-b_8,b_8))
var(coord_8)
plot(coord_8)
coord_8_noise = coord_8
coord_8_noise$x = coord_8$x+rnorm(8,0,0.1)
coord_8_noise$y = coord_8$y+rnorm(8,0,0.1)
plot(coord_8_noise)
coord_8_noise = coord_8
coord_8_noise$x = coord_8$x+rnorm(8,0,0.1)
coord_8_noise$y = coord_8$y+rnorm(8,0,0.1)
plot(coord_8_noise)
coord_4_noise = coord_4
coord_4_noise$x = coord_4$x+rnorm(4,0,0.1)
coord_4_noise$y = coord_4$y+rnorm(4,0,0.1)
plot(coord_4_noise)
coord_2 = data.frame(x=rep(0,2),
y=c(-1,1))
var(coord_2)
plot(coord_2)
coord_2_noise = coord_2
coord_2_noise$x = coord_2$x+rnorm(2,0,0.1)
coord_2_noise$y = coord_2$y+rnorm(2,0,0.1)
plot(coord_2_noise)
coord_2_noise = coord_2
coord_2_noise$x = coord_2$x+rnorm(2,0,0.1)
coord_2_noise$y = coord_2$y+rnorm(2,0,0.1)
plot(coord_2_noise)
coord_2_noise = coord_2
coord_2_noise$x = coord_2$x+rnorm(2,0,0.1)
coord_2_noise$y = coord_2$y+rnorm(2,0,0.1)
plot(coord_2_noise)
coord_2_noise
coord_2_noise = coord_2
coord_2_noise$x = coord_2$x+rnorm(2,0,0.1)
coord_2_noise$y = coord_2$y+rnorm(2,0,0.1)
plot(coord_2_noise)
?rnorm
# sample_generator
# 2
sample_2 <- function(n){
sample_list = list()
coord_2 = data.frame(x=rep(0,2),
y=c(-1,1))
sample = coord_2
for(i in 1:n){
sample = sample %>% mutate(x=x+rnorm(1,0,0.1),
y=y+rnorm(1,0,0.1))
sample_list = c(sample_list,sample)
}
return(sample_list)
}
sample_2(50)
sample_list = c(sample_list,list(sample))
# sample_generator
# 2
sample_2 <- function(n){
sample_list = list()
coord_2 = data.frame(x=rep(0,2),
y=c(-1,1))
sample = coord_2
for(i in 1:n){
sample = sample %>% mutate(x=x+rnorm(1,0,0.1),
y=y+rnorm(1,0,0.1))
sample_list = c(sample_list,list(sample))
}
return(sample_list)
}
sample_2(50)
# sample_generator
# 2
sample_2 <- function(n){
sample_list = list()
coord_2 = data.frame(x=rep(0,2),
y=c(-1,1))
sample = coord_2
for(i in 1:n){
sample = sample %>% mutate(x=x+rnorm(2,0,0.1),
y=y+rnorm(2,0,0.1))
sample_list = c(sample_list,list(sample))
}
return(sample_list)
}
sample_2(50)
# 4
sample_4 <- function(n){
sample_list = list()
coord_4 = data.frame(x=c(-sqrt(1.5),-sqrt(1.5),sqrt(1.5),sqrt(1.5)),
y=c(-sqrt(1.5),sqrt(1.5) ,sqrt(1.5) ,-sqrt(1.5)))
sample = coord_4
for(i in 1:n){
sample = sample %>% mutate(x=x+rnorm(4,0,0.1),
y=y+rnorm(4,0,0.1))
sample_list = c(sample_list,list(sample))
}
return(sample_list)
}
sample_4(50)
mean(4, 6,2,0.5,2.5)
mean(c(4,6,2,0.5,2.5))
1+9+1+6.25+0.25
17.5/5
66 + 1.29 * 5
23/25
9/35
7-8.5
6-8.5
2.5/1.5
15*1.4+20*1.8+15*1.3
76.5/50
10/14
10/14
sqrt(10/14)
sample(25,25)
sample(25,25)
sample(25,25)
?tinytex
install.packages("tinytex")
install.packages("tinytex")
tinytex::install_tinytex()
c(1,2,3,4)>2
[1,2,3]
list(1,2,3)
list(1,2,3)>2
a=c(1,2,3,4,5)
a
a[a==1]
a=c(1,2,3,4,5,1,2,3,4)
a[a==1]
a[a==1]=2
a
data,frame(x="123",y="234")
data,frame(x="123",y="234")
data,frame(x=c(1,2,3),y=c(2,3,4))
data.frame(x="123",y="234")
data.frame(x="wleirj",y="234")
library(tidyverse)
1:10 %>%
map(rnorm, n = 10)
1:10 %>%
map(function(x) rnorm(10, x))
1:10 %>%
map(~ rnorm(10, .x))
1:10 %>%
map(rnorm, n = 10) %>%  # output a list
map_dbl(mean)
1:10 %>%
map(~ rnorm(10, 0, .x))
1:10 %>%
map(~ rnorm(10, 0, .x)) %>%
map_dbl(sd)
map_dbl(mean)
1:10 %>%
map(~ rnorm(10, 0, .x)) %>% map_dbl(mean)
1:10 %>%
map(~ rnorm(10, 0, .x)) %>% map_dbl(sd)
1:10 %>%
map(~ rnorm(10, 0, .x)) %>% map_dbl(var)
1:10 %>%
map(~ rnorm(10, 0, .x)) %>% map_dbl(var) %>% class
()
a = (1/2)^100000 / (1/2)^1000001
a
a = (1/2)^10 / (1/2)^11
a
return y = x^(-2)
exp <- function(x){
return y = x^(-2)
}
return y = x^(-2)
return x^(-2)
return x^(-2)
exp <- function(x){
return x^(-2)
}
fcn <- function(x){
return x^(-2)
}
return (x^(-2))
fcn <- function(x){
return (x^(-2))
}
fcn(1000001)/fcn(1000000)
library(MASS)
library(tidyverse)
library(truncnorm)
library(TruncatedNormal)
size = c(2,4,8,16,32,64)
# sd = c(1,1.5,2,2.5,3)
# cardinality condition sd = 1.5,2.5
# precision condition size = 3, 9
# sd_cardinality = c(1.5,2.5)
# size_precision = c(3, 9)
# no need
normalize <- function(array){
sd_arr = sd(array)
return((array)/sd_arr)
}
# cardinality condition
# size = 3, sd = 1.5
# mvrnorm(n, mean, cov, tol=1e-6, empirical = TRUE)
# sample from standard normal
# truncation boundary 1.5
#group_1
boundary = sqrt(0.2)*2
sample_list = list()
sample_list_1 = list()
N = 100
for(i in size){
for(j in 1:N){
x_coord = mvrnorm(i, c(0,0), diag(2)*0.2, tol=1e-6, empirical = TRUE)[,1]
y_coord = mvrnorm(i, c(0,0), diag(2)*0.2, tol=1e-6, empirical = TRUE)[,2]
while(max(abs(x_coord))> boundary){
x_coord = mvrnorm(i, c(0,0), diag(2)*0.2, tol=1e-6, empirical = TRUE)[,1]
}
while(max(abs(y_coord))> boundary){
y_coord = mvrnorm(i, c(0,0), diag(2)*0.2, tol=1e-6, empirical = TRUE)[,2]
}
sample_list = c(sample_list,list(data.frame(x = x_coord,y = y_coord)))
}
sample_list_1[[(which(size==i))]] = sample_list
sample_list = list()
}
# sample_list_1[[6]][[4]] %>% ggplot(aes(x=x,y=y)) + geom_point()+coord_cartesian(xlim = c(-3,3),ylim = c(-3,3))
# n=64
# var = 0.2
# a = data.frame(x = mvrnorm(n, c(0,0), diag(2)*var, tol=1e-6, empirical = TRUE)[,1],
#                y = mvrnorm(n, c(0,0), diag(2)*var, tol=1e-6, empirical = TRUE)[,2],
#                group = 1)
#
# b = data.frame(x = mvrnorm(n, c(0,0), diag(2)*var, tol=1e-6, empirical = TRUE)[,1],
#                y = mvrnorm(n, c(0,0), diag(2)*var, tol=1e-6, empirical = TRUE)[,2],
#                group=2)
# dat = rbind(a,b)
# dat %>% ggplot(aes(x=x,y=y,color=as.factor(group))) + geom_point()+coord_cartesian(xlim = c(-3,3),ylim = c(-3,3))
#
# sd(a$x)
# sd(a$y)
# sd(b$x)
# a$x = a$x*2*0.6
# a$y = a$y*2*0.6
# b$x = b$x*2*0.6
# b$y = b$y*2*0.6
# dat = rbind(a,b)
# dat %>% ggplot(aes(x=x,y=y,color=as.factor(group))) + geom_point()+coord_cartesian(xlim = c(-3,3),ylim = c(-3,3))
# #group_2
boundary = sqrt(0.2)*2
sample_list = list()
sample_list_2 = list()
for(i in size){
for(j in 1:N){
x_coord = mvrnorm(i, c(0,0), diag(2)*0.2, tol=1e-6, empirical = TRUE)[,1]
y_coord = mvrnorm(i, c(0,0), diag(2)*0.2, tol=1e-6, empirical = TRUE)[,2]
while(max(abs(x_coord))> boundary){
x_coord = mvrnorm(i, c(0,0), diag(2)*0.2, tol=1e-6, empirical = TRUE)[,1]
}
while(max(abs(y_coord))> boundary){
y_coord = mvrnorm(i, c(0,0), diag(2)*0.2, tol=1e-6, empirical = TRUE)[,2]
}
sample_list = c(sample_list,list(data.frame(x = x_coord,y = y_coord)))
}
sample_list_2[[(which(size==i))]] = sample_list
sample_list = list()
}
all_sample = tibble(group_sample_1 = sample_list_1,
group_sample_2 = sample_list_2)
library(dplyr)
library(jsonlite)
all_sample = toJSON(all_sample)
setwd("/Users/young/Library/Mobile Documents/com~apple~CloudDocs/Mean_position_perception_lab/Cardinality_Gaussian/dist")
write_json(all_sample,"all_sample.js")
# #Precision condition
# #group_1
# sample_list_3 = list()
# # for(i in sd){
# for(j in size_precision){
#     sample_list_3 = c(sample_list_3,list(replicate(n=10,list(mvrnorm(j, c(0,0), diag(2), tol=1e-6, empirical = TRUE)))))
# }
#
# #group_2
# sample_list_4 = list()
# for(i in sd){
#   for(j in size_precision){
#     sample_list_4 = c(sample_list_4,list(replicate(n=5,list(mvrnorm(j, c(0,0), diag(2)*i, tol=1e-6, empirical = TRUE)))))
#   }
# }
#
# all_sample_precision = tibble(group_1 = sample_list_3, group_2 = sample_list_4)
#
# all_sample_precision = toJSON(all_sample_precision)
#
# setwd("/Users/young/Desktop/UCSD/Research/Mean_perception_position/Ensembles_mean_perception/dist")
# write_json(all_sample_precision,"all_sample_precision.json")
library(MASS)
library(tidyverse)
library(truncnorm)
library(TruncatedNormal)
size = c(2,4,8,16,32,64,128)
# sd = c(1,1.5,2,2.5,3)
# cardinality condition sd = 1.5,2.5
# precision condition size = 3, 9
# sd_cardinality = c(1.5,2.5)
# size_precision = c(3, 9)
# no need
normalize <- function(array){
sd_arr = sd(array)
return((array)/sd_arr)
}
# cardinality condition
# size = 3, sd = 1.5
# mvrnorm(n, mean, cov, tol=1e-6, empirical = TRUE)
# sample from standard normal
# truncation boundary 1.5
#group_1
boundary = sqrt(0.2)*2
sample_list = list()
sample_list_1 = list()
N = 100
for(i in size){
for(j in 1:N){
x_coord = mvrnorm(i, c(0,0), diag(2)*0.2, tol=1e-6, empirical = TRUE)[,1]
y_coord = mvrnorm(i, c(0,0), diag(2)*0.2, tol=1e-6, empirical = TRUE)[,2]
while(max(abs(x_coord))> boundary){
x_coord = mvrnorm(i, c(0,0), diag(2)*0.2, tol=1e-6, empirical = TRUE)[,1]
}
while(max(abs(y_coord))> boundary){
y_coord = mvrnorm(i, c(0,0), diag(2)*0.2, tol=1e-6, empirical = TRUE)[,2]
}
sample_list = c(sample_list,list(data.frame(x = x_coord,y = y_coord)))
}
sample_list_1[[(which(size==i))]] = sample_list
sample_list = list()
}
# sample_list_1[[6]][[4]] %>% ggplot(aes(x=x,y=y)) + geom_point()+coord_cartesian(xlim = c(-3,3),ylim = c(-3,3))
# n=64
# var = 0.2
# a = data.frame(x = mvrnorm(n, c(0,0), diag(2)*var, tol=1e-6, empirical = TRUE)[,1],
#                y = mvrnorm(n, c(0,0), diag(2)*var, tol=1e-6, empirical = TRUE)[,2],
#                group = 1)
#
# b = data.frame(x = mvrnorm(n, c(0,0), diag(2)*var, tol=1e-6, empirical = TRUE)[,1],
#                y = mvrnorm(n, c(0,0), diag(2)*var, tol=1e-6, empirical = TRUE)[,2],
#                group=2)
# dat = rbind(a,b)
# dat %>% ggplot(aes(x=x,y=y,color=as.factor(group))) + geom_point()+coord_cartesian(xlim = c(-3,3),ylim = c(-3,3))
#
# sd(a$x)
# sd(a$y)
# sd(b$x)
# a$x = a$x*2*0.6
# a$y = a$y*2*0.6
# b$x = b$x*2*0.6
# b$y = b$y*2*0.6
# dat = rbind(a,b)
# dat %>% ggplot(aes(x=x,y=y,color=as.factor(group))) + geom_point()+coord_cartesian(xlim = c(-3,3),ylim = c(-3,3))
# #group_2
boundary = sqrt(0.2)*2
sample_list = list()
sample_list_2 = list()
for(i in size){
for(j in 1:N){
x_coord = mvrnorm(i, c(0,0), diag(2)*0.2, tol=1e-6, empirical = TRUE)[,1]
y_coord = mvrnorm(i, c(0,0), diag(2)*0.2, tol=1e-6, empirical = TRUE)[,2]
while(max(abs(x_coord))> boundary){
x_coord = mvrnorm(i, c(0,0), diag(2)*0.2, tol=1e-6, empirical = TRUE)[,1]
}
while(max(abs(y_coord))> boundary){
y_coord = mvrnorm(i, c(0,0), diag(2)*0.2, tol=1e-6, empirical = TRUE)[,2]
}
sample_list = c(sample_list,list(data.frame(x = x_coord,y = y_coord)))
}
sample_list_2[[(which(size==i))]] = sample_list
sample_list = list()
}
all_sample = tibble(group_sample_1 = sample_list_1,
group_sample_2 = sample_list_2)
library(dplyr)
library(jsonlite)
all_sample = toJSON(all_sample)
setwd("/Users/young/Library/Mobile Documents/com~apple~CloudDocs/Mean_position_perception_lab/Cardinality_Gaussian_2/dist")
write_json(all_sample,"all_sample.js")
# #Precision condition
# #group_1
# sample_list_3 = list()
# # for(i in sd){
# for(j in size_precision){
#     sample_list_3 = c(sample_list_3,list(replicate(n=10,list(mvrnorm(j, c(0,0), diag(2), tol=1e-6, empirical = TRUE)))))
# }
#
# #group_2
# sample_list_4 = list()
# for(i in sd){
#   for(j in size_precision){
#     sample_list_4 = c(sample_list_4,list(replicate(n=5,list(mvrnorm(j, c(0,0), diag(2)*i, tol=1e-6, empirical = TRUE)))))
#   }
# }
#
# all_sample_precision = tibble(group_1 = sample_list_3, group_2 = sample_list_4)
#
# all_sample_precision = toJSON(all_sample_precision)
#
# setwd("/Users/young/Desktop/UCSD/Research/Mean_perception_position/Ensembles_mean_perception/dist")
# write_json(all_sample_precision,"all_sample_precision.json")
